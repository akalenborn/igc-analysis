(r) - required for the analysis/display of algorithms to work properly
(o) - change optional, not required for analysis (contains mostly additional information)
_________________________________________________________________________________________________
_________________________________________________________________________________________________
Changes: 01/03/2021

+New Files added:
*triangle.js - contains algorithm for triangle detection (r)

+File changes:
*index.html
    - added preference option for triangle algorithm (r)
    -> at line 100 - 110 (below other preferences-option containers)
            <div class="preferences-option">
                 <label for="select-triangle-opt">Triangle Calc Points:</label>
                 <select id="select-triangle-opt" autocomplete="off">
                     <option value="100">100</option>
                     <option value="200">200</option>
                     <option value="300">300</option>
                     <option value="400">400</option>
                     <option value="500">500</option>
                 </select>
            </div>

    - added triangle-info-container: shows details of the detected triangle (o)
    -> at line 150 (below igc-info-container)
             <div id="triangle-info-container"></div>

    - added triangle-runtime: display runtime information of triangle detection algorithm (o)
    -> at line 152 (below triangle-info-container)
              <div id="triangle-runtime">
                 <p id="opt-points"></p>
                 <p id="cand-search"></p>
                 <p id="opt-cand-search"></p>
              </div>

    - include triangle.js script (r)
    -> at line 216
        <script src="src/algorithms/triangle.js"></script>

*UIControl.js
    - changes to function displayKeyFigures() (o)
    -> added: {name: "Total altitude gain", value: getAltitudeString(keyFigures.gainInAltitude)},

*keyFigures.js
    - changes to returned object in function getKeyFigures() (o)
    -> added: gainInAltitude: getGainInAltitude(),

    - added function getGainInAltitude() (o)
        function getGainInAltitude(){
            let totalAltitude = 0;
            let altitudeDiff;
            for (let i = 1; i < igcFile.gpsAltitude.length; i++) {
                altitudeDiff = igcFile.gpsAltitude[i] - igcFile.gpsAltitude[i-1];
                if (altitudeDiff > 0) totalAltitude += altitudeDiff;
            }
            return totalAltitude;
        }


*globalVariables.js
    - added new Variables:
          const triangleCheckbox = document.querySelector('#triangle-checkbox'); (o)
          const triangleInfoContainer = document.querySelector('#triangle-info-container'); (o)
          const triangleOptSelect = document.querySelector('#select-triangle-opt'); (r)
          let optLatLong = []; (r)

    - changes to existing Variables: (r)
          let results = {
              igcHeader: null,
              additionalData: null,
              shapeDetection: {
                  curve90: null,
                  curve180: null,
                  circle: null,
                  eight: null,
                  triangle: null // added
              }
          };

          let algorithms = [
              {name: "curve180", result: results.shapeDetection.curve180, checkbox: curve180Checkbox, color: "#00FF00"},
              {name: "circle", result: results.shapeDetection.circle, checkbox: circleCheckbox, color: "blue"},
              {name: "eight", result: results.shapeDetection.eight, checkbox: eightCheckbox, color: "yellow"},
              {name: "triangle", result: results.shapeDetection.triangle, checkbox: triangleCheckbox, color: "green"} // added
          ];

*mapControl.js
    - added new function: required to display/remove triangle on map (r)
    -> at line 165
          addTriangle: (triObj, color) => {
               if (layerGroups[triObj.name] === undefined) {
                  layerGroups[triObj.name] = L.layerGroup().addTo(map);
               }
               L.polygon([triObj.result.w1, triObj.result.w2, triObj.result.w3], {color: color}).addTo(layerGroups[triObj.name]);
          },

*analyzeIGC.js
    - added init of triangle algorithm (r)
        results.shapeDetection.triangle = await triangleDetection(); // line 12
        algorithms[4].result = results.shapeDetection.triangle; // line 15

*displayResults.js
    - changed function displayResults(results) to: (r)
        async function displayResults(results) {
            curve90 = results.shapeDetection.curve90;
            curve180 = results.shapeDetection.curve180;
            setDisabledProperty();

            for (const algorithm of algorithms) {
                    if(algorithm.name!="triangle") {
                        displayShape(algorithm);
                    }
                    else{
                        displayTriangle(algorithm);
                    }
            }
        }

    - changed function setDisabledProperty() to: (r)
        function setDisabledProperty() {
            for (const algorithm of algorithms) {
                if(algorithm.name!="triangle") {
                    algorithm.checkbox.disabled = arrayIsEmpty(algorithm.result);
                }
            }
        }

    - changes to document.addEventListener (r)
        changes to if(algorithm.checkbox.checked) (r):
            if (algorithm.checkbox.checked) {
               if(algorithm.name!="triangle"){
                   displayShape(algorithm);
               }
               else{
                   displayTriangle(algorithm);
               }
            } else {
               mapControl.clearLayer(algorithm.name);
            }

        added triangleOptSelect.addEventListener (r):
            triangleOptSelect.addEventListener('change', () => {
                    resetMap();
                    displayIgc(mapControl);
                    runAlgorithms(igcFile);
                });

    - added new function displayTriangle() (r)
        function displayTriangle(algorithm){
            if (algorithm.checkbox.checked){
                mapControl.addMarkerTo(algorithm.name, algorithm.result.startP);
                mapControl.addMarkerTo(algorithm.name, algorithm.result.endP);
                mapControl.addTriangle(algorithm, algorithm.color);
            }

            displayTriangleInfo();
        }

    - added new function displayTriangleInfo() (r)
        function displayTriangleInfo(){
            triangleInfoContainer.innerHTML =
                '<h2>Scoring Information</h2>' +
                '<table id="triangleInfo">' +
                '<tbody>' +
                '<tr>' +
                '<th>Flight Score:</th>' +
                '<td>' + results.shapeDetection.triangle.flightScore + '</td>'+
                '</tr>'+
                '<tr>' +
                '<tr>' +
                '<th>Type:</th>' +
                '<td>' + results.shapeDetection.triangle.type + '</td>'+
                '</tr>'+
                '<tr>' +
                '<th>Total Distance:</th>' +
                '<td>' + results.shapeDetection.triangle.distTotal + "km" + '</td>'+
                '</tr>'+
                '<tr>' +
                '<tr>'
                +'<th>Leg 1:</th>' +
                '<td>' +  + results.shapeDetection.triangle.w12+ "km" +
                " - " + results.shapeDetection.triangle.w1prcnt+ "%" + '</td>'+
                '</tr>'+
                '<tr>'
                +'<th>Leg 2:</th>' +
                '<td>' +  results.shapeDetection.triangle.w23 + "km" +
                " - " + results.shapeDetection.triangle.w2prcnt+ "%" + '</td>'+
                '</tr>'+
                '<tr>'
                +'<th>Leg 3:</th>' +
                '<td>' + results.shapeDetection.triangle.w31  + "km" +
                " - " + results.shapeDetection.triangle.w3prcnt+ "%" + '</td>'+
                '</tr>'+
                '<tr>'
                +'<th>Start to End Distance:</th>' +
                '<td>' + results.shapeDetection.triangle.distStartEnd + "km" + '</td>'+
                '</tr>'+
                '</tbody>' +'</table>';
        }








